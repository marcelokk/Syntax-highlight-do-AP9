<?xml version="1.0" encoding="UTF-8"?>
<!--

	Author: Marcelo Koti Kamada

	Syntax hightlight para o assembly do AP9

-->
<language id="ap9" _name="AP9" version="2.0" _section="Sources">

  <metadata>
    <property name="globs">*.asm</property>
    <property name="mimetypes">text/x-asm</property>
    <property name="line-comment-start">;</property>
  </metadata>

  <styles>
    <style id="register"          _name="Register"              map-to="def:decimal"/>

    <style id="comment"           _name="Comment"               map-to="def:comment"/>

    <style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>

    <style id="char"              _name="Character"             map-to="def:character"/>
    <style id="string"            _name="String"                map-to="def:string"/>

    <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
    <style id="hexadecimal"       _name="Hexadecimal number"    map-to="def:base-n-integer"/>

    <style id="type"              _name="Data Type"             map-to="def:type"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="storage-class"     _name="Storage Class"         map-to="def:type"/>
  </styles>

  <default-regex-options case-sensitive="false"/>

  <definitions>

    <!--regexs-->
    <define-regex id="preproc-start">^\s*#\s*</define-regex>
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
    </context>

    <context id="char" style-ref="char">
      <match extended="true">
        (?&lt;![\w\.])
        \#'([a-z]|[A-Z]|[0-9])'
        (?![\w\.])
      </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        (\#?)[0-9]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>load</keyword>
      <keyword>loadn</keyword>
      <keyword>loadi</keyword>
      <keyword>store</keyword>
      <keyword>storei</keyword>
      <keyword>mov</keyword>

      <keyword>outchar</keyword>
      <keyword>inchar</keyword>

      <keyword>add</keyword>
      <keyword>sub</keyword>
      <keyword>mul</keyword>
      <keyword>div</keyword>
      <keyword>inc</keyword>
      <keyword>mod</keyword>

      <keyword>and</keyword>
      <keyword>or</keyword>
      <keyword>xor</keyword>
      <keyword>not</keyword>
      <keyword>shift</keyword>
      <keyword>cmp</keyword>

      <keyword>jmp</keyword>
      <keyword>jeq</keyword>
      <keyword>jne</keyword>
      <keyword>jz</keyword>
      <keyword>jnz</keyword>
      <keyword>jc</keyword>
      <keyword>jnc</keyword>
      <keyword>jgt</keyword>
      <keyword>jlt</keyword>
      <keyword>jeg</keyword>
      <keyword>jel</keyword>
      <keyword>jo</keyword>
      <keyword>jno</keyword>

      <keyword>call</keyword>
      <keyword>ceq</keyword>
      <keyword>cne</keyword>
      <keyword>cz</keyword>
      <keyword>cnz</keyword>
      <keyword>cc</keyword>
      <keyword>cnc</keyword>
      <keyword>cgt</keyword>
      <keyword>clt</keyword>
      <keyword>ceg</keyword>
      <keyword>cel</keyword>
      <keyword>co</keyword>
      <keyword>cno</keyword>

      <keyword>rts</keyword>
      <keyword>push</keyword>
      <keyword>pop</keyword>

      <keyword>nop</keyword>
      <keyword>halt</keyword>
      <keyword>setc</keyword>
      <keyword>breakp</keyword>

      <keyword>load2</keyword>
      <keyword>store2</keyword>
    </context>

    <context id="types" style-ref="type">
      <keyword>var</keyword>
    </context>

    <context id="storage-class" style-ref="storage-class">
      <keyword>static</keyword>
    </context>

    <!--Main context-->
    <context id="ap9" class="no-spell-check">
      <include>

				<context id="comment" style-ref="comment">
                    <start>;</start>
                    <end>$</end>
        </context>

				<context id="register" style-ref="decimal">
				  <match extended="true">
		        (?&lt;![\w\.])
						r[0-7]
    		    (?![\w\.])
				  </match>
				</context>

        <context ref="char"/>
        <context ref="string"/>

        <context ref="decimal"/>
        <context ref="hexadecimal"/>

        <context ref="types"/>
        <context ref="keywords"/>
        <context ref="storage-class"/>
      </include>
    </context>

  </definitions>
</language>
